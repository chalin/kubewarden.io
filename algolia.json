[{"authors":["VÃ­ctor Cuadrado Juan"],"categories":null,"content":"\u003cp\u003eWe are pleased to announce a new architecture for the Kubewarden stack, in line\nwith its journey to maturity:\u003c/p\u003e\n\u003cp\u003eThe introduction of a \u003cstrong\u003ePolicyServer\u003c/strong\u003e Custom Resource Definition (CRD) which\nallows users to describe a policy-server Deployment, together with binding\n\u003cstrong\u003eClusterAdmissionPolicies\u003c/strong\u003e to a specific \u003cstrong\u003ePolicyServer\u003c/strong\u003e instance.\u003c/p\u003e\n\u003cp\u003eThese 2 changes are accompanied by a multitude of improvements to make Kubewarden\nmore comfortable for Kubernetes Administrators, such as validation for\nKuberwarden Custom Resources, improvements in Helm Charts, Status and\nConditions for \u003cstrong\u003eClusterAdmissionPolicies\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eFor a comprehensive list, see the release notes of\n\u003ca href=\"https://github.com/kubewarden/helm-charts/releases/tag/kubewarden-crds-0.1.0\"\u003ekubewarden-crds-0.1.0\u003c/a\u003e\nand\n\u003ca href=\"https://github.com/kubewarden/helm-charts/releases/tag/kubewarden-controller-0.3.0\"\u003ekubewarden-controller-0.3.0\u003c/a\u003e\nHelm charts.\u003c/p\u003e\n\u003ch2 id=\"how-does-it-look-like\"\u003eHow does it look like?\u003c/h2\u003e\n\u003cp\u003eIn previous versions, the Kubewarden Controller instantiated a single Deployment\nof policy-server. That policy-server was configured via a ConfigMap, which\ncontained the Deployment options (image, replicas, \u0026hellip;), and a list of policies\nto be loaded, with information on where to pull them from, their configuration\noptions and so on.\u003c/p\u003e\n\u003cp\u003eWith the addition of the new \u003cstrong\u003ePolicyServer\u003c/strong\u003e Custom Resource, administrators\nhave a better UX, since they can define as many policy servers as they need, and\nget to select what PolicyServer each ClusterAdmissionPolicy targets. Let\u0026rsquo;s see a\ndiagram of the new architecture:\u003c/p\u003e\n\u003cfigure\u003e\n    \u003cimg src=\"/images/how-it-works-kubewarden.svg\"\n         alt=\"new architecture diagram\"/\u003e \n\u003c/figure\u003e\n\n\u003cp\u003eOn the diagram, notice the 2 separate PolicyServer Deployments in cyan and mauve\n(right), created as specified in the 2 PolicyServer resources (left).\u003c/p\u003e\n\u003cp\u003eEach policy server loads different policies \u0026ndash; all ClusterAdmissionPolicies that\ntarget that specific policy server. The new PolicyServer Custom Resource is\ncluster-wide, which means that is identifiable by its unique \u003ccode\u003ename\u003c/code\u003e. Here is an\nexample of a PolicyServer named \u003ccode\u003etenant-a\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e---\n\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epolicies.kubewarden.io/v1alpha2\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePolicyServer\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003etenant-a\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eghcr.io/kubewarden/policy-server:v0.1.10\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003ereplicas\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe PolicyServer Custom Resource also accepts an optional\n\u003ccode\u003espec.serviceAccountName\u003c/code\u003e to be associated with (if not set, as here, the\nNamespace default ServiceAccount will be used).\u003c/p\u003e\n\u003cp\u003eA ClusterAdmissionPolicy targeting that PolicyServer needs to set\n\u003ccode\u003espec.policyServer\u003c/code\u003e to \u003ccode\u003etenant-a\u003c/code\u003e, as such:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e---\n\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epolicies.kubewarden.io/v1alpha2\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eClusterAdmissionPolicy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epsp-capabilities\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003epolicyServer\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003etenant-a\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003emodule\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eregistry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.3\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003eapiGroups\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e]\n      \u003cspan style=\"color:#f92672\"\u003eapiVersions\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e]\n      \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pods\u0026#34;\u003c/span\u003e]\n      \u003cspan style=\"color:#f92672\"\u003eoperations\u003c/span\u003e:\n        - \u003cspan style=\"color:#ae81ff\"\u003eCREATE\u003c/span\u003e\n        - \u003cspan style=\"color:#ae81ff\"\u003eUPDATE\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003emutating\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003esettings\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eallowed_capabilities\u003c/span\u003e:\n      - \u003cspan style=\"color:#ae81ff\"\u003eCHOWN\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003erequired_drop_capabilities\u003c/span\u003e:\n      - \u003cspan style=\"color:#ae81ff\"\u003eNET_ADMIN\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFor a more in depth dive, have a look at our \u003ca href=\"https://docs.kubewarden.io/architecture.html\"\u003earchitecture\ndocs\u003c/a\u003e, and the \u003ca href=\"https://github.com/kubewarden/kubewarden-controller/blob/main/docs/crds/README.asciidoc\"\u003eKubewarden CRDs documentation\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"ok-but-what-does-this-mean-for-administrators\"\u003eOk, but what does this mean for administrators?\u003c/h2\u003e\n\u003cp\u003eWith the possibility to use more than one PolicyServer, it is now up to the\nKubernetes administrators on how they want to split and organize policy\nevaluations, at the same time that resilience grows.\u003c/p\u003e\n\u003cp\u003eWhile the old architecture was already HA, a noisy tenant/namespace or a\nfrequently used policy could in the past bring to a crawl the only policy server\nand break havoc in the Cluster (as all admission reviews for the cluster went\nthrough it to be screened).\u003c/p\u003e\n\u003cp\u003eNow for example, a Kubernetes Administrator can decide to isolate policy\nevaluations per tenant/namespace by creating a PolicyServer for each tenant\nworkload. Or run mission critical policies separately, making the whole\ninfrastructure more resilient.\u003c/p\u003e\n\u003cp\u003eIn the future, with an upcoming namespaced AdmissionPolicy Custom Resource,\nadministrators will be able to give different tenants control over their own\nadmission policies, reducing administrative overload.\u003c/p\u003e\n\u003cp\u003eThe new architecture also validates and mutates PolicyServers and\nClusterAdmissionPolicies with dedicated admission controllers, for a better UX.\nWhich means that administrators can rest comfortably when editing them, as\ncatastrophic outcomes (such as all policies being dropped by a misconfigured\nPolicyServer, leading to DOS against the cluster) can never happen.\u003c/p\u003e\n\u003cp\u003eAlso, ClusterAdmissionPolicies will, if no \u003ccode\u003espec.policyServer\u003c/code\u003e is defined, bind\nto the PolicyServer named \u003ccode\u003edefault\u003c/code\u003e (created by the Helm chart). In addition,\n\u003ca href=\"https://kubernetes.io/docs/concepts/overview/working-with-objects/finalizers/\"\u003eFinalizers\u003c/a\u003e\nare now added to all Kubewarden Custom Resources, which ensure orderly deletion\nby the Kubewarden Controller.\u003c/p\u003e\n\u003cp\u003eThe inclusion of validating and mutating webhooks for Kuberwarden CRDs means that\nthe controller webhook server needs to be securely hooked up to the Kubernetes\nAPI. In this case, it means using TLS certificates. We have chosen to integrate\nKuberwarden with \u003ca href=\"https://cert-manager.io/\"\u003ecert-manager\u003c/a\u003e, to simplify the\ninstallation, and our Helm Chart today comes with the option for automatically\ncreating and setting up Self-Signed certs, or using your own cert-manager\nIssuer.\u003c/p\u003e\n\u003cp\u003eFor ease of deployment, we have separated the CRDs into its own Helm chart:\n\u003ccode\u003ekubewarden-crds\u003c/code\u003e. This prepares the stack for smoother upgrades in the future.\nThe Kubewarden Controller and default policy server stay in the\n\u003ccode\u003ekubewarden-controller\u003c/code\u003e Helm chart.\u003c/p\u003e\n\u003cp\u003eAll of the new changes simplify managing clusters. Which makes Kubewarden use\nvia \u003ca href=\"https://fleet.rancher.io/\"\u003eFleet\u003c/a\u003e more consistent and streamlined.\u003c/p\u003e\n\u003ch2 id=\"a-hands-on-example\"\u003eA hands-on example\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s install Kubewarden and secure our cluster against privileged pods with a\nsimple policy.\u003c/p\u003e\n\u003ch3 id=\"installing-kubewarden\"\u003eInstalling Kubewarden\u003c/h3\u003e\n\u003cp\u003eFollow this example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.5.3/cert-manager.yaml\n$ kubectl wait --for=condition=Available deployment --timeout=2m -n cert-manager --all\n$ helm repo add kubewarden https://charts.kubewarden.io\n$ helm install --create-namespace -n kubewarden kubewarden-crds kubewarden/kubewarden-crds\n$ helm install --wait -n kubewarden kubewarden-controller kubewarden/kubewarden-controller\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis will install \u003ca href=\"https://cert-manager.io\"\u003ecert-manager\u003c/a\u003e, a dependency of\nKubewarden, and then install the \u003ccode\u003ekubewarden-crds\u003c/code\u003e and \u003ccode\u003ekubewarden-controller\u003c/code\u003e\nHelm charts in the default configuration (which includes self-signed TLS certs).\nShortly after, you will have the Kubewarden Controller running and one\nPolicyServer, named \u003ccode\u003edefault\u003c/code\u003e, on the \u003ccode\u003ekubewarden\u003c/code\u003e namespace:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kubectl get policyservers\nNAME      AGE\ndefault   38s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe default configuration values should be good enough for the majority of\ndeployments (all options are documented \u003ca href=\"https://charts.kubewarden.io/#configuration\"\u003ehere\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eNow, you can use Kubewarden, with Go, Rust, Swift, Open Policy Agent and\nGatekeeper policies, as you are used to.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s deploy our own policy-server named \u003ccode\u003emy-policy-server\u003c/code\u003e, and a Kubewarden\nPolicy based on the\n\u003ca href=\"https://github.com/kubewarden/pod-privileged-policy\"\u003epod-privileged\u003c/a\u003e policy, to\nbe scheduled in that specific policy-server:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kubectl apply -f - \u0026lt;\u0026lt;EOF\n---\napiVersion: policies.kubewarden.io/v1alpha2\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: privileged-pods\nspec:\n  policyServer: my-policy-server\n  module: registry://ghcr.io/kubewarden/policies/pod-privileged:v0.1.9\n  rules:\n    - apiGroups: [\u0026#34;\u0026#34;]\n      apiVersions: [\u0026#34;v1\u0026#34;]\n      resources: [\u0026#34;pods\u0026#34;]\n      operations:\n        - CREATE\n        - UPDATE\n  mutating: false\n---\napiVersion: policies.kubewarden.io/v1alpha2\nkind: PolicyServer\nmetadata:\n  name: my-policy-server\nspec:\n  image: ghcr.io/kubewarden/policy-server:v0.1.10\n  replicas: 1\nEOF\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNote for Windows (\u003ca href=\"https://rancherdesktop.io\"\u003eRancher Desktop\u003c/a\u003e) users:\u003c/p\u003e\n\u003cp\u003eThe above uses Linux shell syntax and won\u0026rsquo;t work on Windows PowerShell\nor \u003ca href=\"https://github.com/Microsoft/Terminal\"\u003eWindows Terminal\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eYou can use this command instead:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f https://www.kubewarden.io/blog/2021/10/new-architecture/deploy-pod-privileged.yaml\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kubectl get policyservers\nNAME               AGE\ndefault            1m12s\nmy-policy-server   29s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhile the new Deployment for the new PolicyServer is still being deployed, the\npolicy will be marked as \u003ccode\u003eunschedulable\u003c/code\u003e, and move to \u003ccode\u003epending\u003c/code\u003e once we are\nwaiting for the PolicyServer to accept connections:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kubectl get clusteradmissionpolicies\nNAME              POLICY SERVER      MUTATING   STATUS\nprivileged-pods   my-policy-server   false      pending\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe can wait some seconds for the policy server to be up, and the policy to be active:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kubectl wait --for=condition=PolicyActive clusteradmissionpolicy/privileged-pods\nclusteradmissionpolicy.policies.kubewarden.io/privileged-pods condition met\n\n$ kubectl get clusteradmissionpolicies\nNAME              POLICY SERVER      MUTATING   STATUS\nprivileged-pods   my-policy-server   false      active\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow if we try to create a Pod with at least one privileged container, it will\nnot be allowed:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kubectl apply -f - \u0026lt;\u0026lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: privileged-pod\nspec:\n  containers:\n    - name: nginx\n      image: nginx:latest\n      securityContext:\n          privileged: true\nEOF\n\nError from server: error when creating \u0026#34;STDIN\u0026#34;: admission webhook \u0026#34;privileged-pods.kubewarden.admission\u0026#34; denied the request: User \u0026#39;youruser:yourrole\u0026#39; cannot schedule privileged containers\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003eHere the same command for Windows (Rancher Desktop):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ekubectl apply -f https://www.kubewarden.io/blog/2021/10/new-architecture/create-privileged-pod.yaml\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch1 id=\"foreword\"\u003eForeword\u003c/h1\u003e\n\u003cp\u003eThe new Kubewarden stack, with the new cluster-wide PolicyServer resource,\nallows fine-tuning of policies, and at the same time makes the life of\nadministrators easier with CR validations, workflow simplifications, and\nseparation of concerns.\u003c/p\u003e\n\u003cp\u003eWe hope you enjoy Kubewarden. We have many ideas about how to expand and improve\nthe project, and we would like to hear what you would like to see in the\nfuture: don\u0026rsquo;t hesitate to open an issue in any of the\n\u003ca href=\"https://github.com/kubewarden\"\u003egithub.com/kubewarden\u003c/a\u003e projects or get in\ncontact in the \u003ca href=\"https://kubernetes.slack.com/archives/C01T3GTC3L7\"\u003e#kubewarden Slack channel\u003c/a\u003e!\u003c/p\u003e\n\u003cp\u003eStay tuned for more!\u003c/p\u003e\n","date":1633046400,"description":"","dir":"blog/2021/10/new-architecture/","expirydate":-62135596800,"fuzzywordcount":1300,"keywords":null,"kind":"page","lang":"en","lastmod":1633614063,"objectID":"818e764ce6525954f70e847ac1cbe1fc","permalink":"/blog/2021/10/new-architecture/new-architecture-to-ease-kubewarden-administrators-lives/","postref":"818e764ce6525954f70e847ac1cbe1fc","publishdate":"2021-10-01T00:00:00Z","readingtime":6,"relpermalink":"/blog/2021/10/new-architecture/new-architecture-to-ease-kubewarden-administrators-lives/","section":"blog","summary":"We are pleased to announce a new architecture for the Kubewarden stack, in line with its journey to maturity:\nThe introduction of a PolicyServer Custom Resource Definition (CRD) which allows users to describe a policy-server Deployment, together with binding ClusterAdmissionPolicies to a specific PolicyServer instance.\nThese 2 changes are accompanied by a multitude of improvements to make Kubewarden more comfortable for Kubernetes Administrators, such as validation for Kuberwarden Custom Resources, improvements in Helm Charts, Status and Conditions for ClusterAdmissionPolicies.","tags":null,"title":"A new architecture to ease Kubewarden administrators' lives","type":"blog","url":"/blog/2021/10/new-architecture/new-architecture-to-ease-kubewarden-administrators-lives/","weight":0,"wordcount":1229},{"authors":null,"categories":null,"content":"","date":1633046400,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1633614063,"objectID":"","permalink":"/blog/","postref":"","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/blog/","section":"blog","summary":"","tags":null,"title":"Blog","type":"blog","url":"/blog/","weight":0,"wordcount":0},{"authors":["Flavio Castelli","Rafael FernÃ¡ndez LÃ³pez"],"categories":null,"content":"\u003cp\u003eKubewarden is a policy framework for Kubernetes. It can be used to\nsecure your clusters and to ensure they stay compliant with the\nrules your organization establishes over time.\u003c/p\u003e\n\u003cp\u003eBy leveraging the power of WebAssembly, Kubewarden allows policy authors\nto write policies using traditional programming languages such as Rust, Go,\nAssemblyScript and Swift.\u003c/p\u003e\n\u003cp\u003eKubewarden policies, once compiled into WebAssembly modules, are then\ndistributed using regular OCI registries. This allows Operators to have a\nconsistent way to securely distribute both container images and policies.\u003c/p\u003e\n\u003cp\u003eKubewarden is one of the Open Source projects working to provide a\nPolicy As Code solution to Kubernetes. Historically, the first project in\nthis space has been \u003ca href=\"https://openpolicyagent.org/\"\u003eOpen Policy Agent\u003c/a\u003e, also known\nas \u0026ldquo;OPA\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eOpen Policy Agent policies are written using a purpose-built query language\ncalled \u003ca href=\"https://www.openpolicyagent.org/docs/latest/policy-language/\"\u003eRego\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe don\u0026rsquo;t think there\u0026rsquo;s a right or wrong approach when it comes to writing\npolicies. Both programming languages (Rust and Go) and query languages (Rego)\nhave advantages and disadvantages.\nWe strongly believe policy authors should have the freedom to pick the tool that\nbest suits their needs.\u003c/p\u003e\n\u003cp\u003eAt the same time, we realize that this flexibility can significantly complicate\nthe lives of Operation teams. Simplicity is paramount when operating Kubernetes;\nhaving different ways to distribute and enforce policies potentially\novercomplicates things.\u003c/p\u003e\n\u003cp\u003eThe Kubewarden team wants to further expand the freedom of policy authors without\ncompromising the operation experience we currently provide.\u003c/p\u003e\n\u003cp\u003eWe want to provide a cohesive way to distribute policies, a uniform\nway to enforce them and a single platform to host them, regardless of\nthe language used to write those individual policies.\u003c/p\u003e\n\u003cp\u003eWe want to provide a \u003cstrong\u003eUniversal Policy Platform\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"webassembly-to-the-rescue\"\u003eWebAssembly to the Rescue\u003c/h2\u003e\n\u003cp\u003eRego is a query language created by the Open Policy Agent project. The language\nis inspired by \u003ca href=\"https://en.wikipedia.org/wiki/Datalog\"\u003eDatalog\u003c/a\u003e; its\nmain purpose is to perform queries on some JSON input data and provide some\noutput as the response.\u003c/p\u003e\n\u003cp\u003eThe good news is that Rego programs can be built into WebAssembly modules using\nthe official \u003ccode\u003eopa\u003c/code\u003e command line utility. This is documented in depth inside\nof the \u003ca href=\"https://www.openpolicyagent.org/docs/latest/wasm/\"\u003eofficial documentation\u003c/a\u003e\nof Open Policy Agent.\u003c/p\u003e\n\u003cp\u003eWhile building a Rego program into WebAssembly is simple, running the resulting WebAssembly\nmodule requires more effort. The good news is, we did the hard work!\u003c/p\u003e\n\u003cp\u003eWe wrote a Rust library that can be used to invoke Rego policies compiled into\nWebAssembly modules.\nThis library is called Burrego (a burrito with a Rego filling: obvious, isn\u0026rsquo;t it?! ð¯ ð¤)\nand can be found \u003ca href=\"https://github.com/kubewarden/policy-evaluator/tree/main/crates/burrego\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe Rego language provides some \u003ca href=\"https://www.openpolicyagent.org/docs/latest/policy-reference/#built-in-functions\"\u003ebuilt-in functions\u003c/a\u003e\nto help with String operations, regular expressions and many more.\nWhen building a Rego policy into a WebAssembly module, some of these built-in\nfunctions are going to be implemented inside of the Wasm file itself; while others\nhave to be provided at execution time by the WebAssembly runtime evaluating the module.\u003c/p\u003e\n\u003cp\u003eThe Burrego library implements the built-in functions that are not supported natively\nby the WebAssembly modules produced by \u003ccode\u003eopa build\u003c/code\u003e. There are still some built-ins that\nBurrego does not yet provide; however, based on the policies we have seen in the open,\nthe ones we already support should be enough for most Kubernetes users.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/kubewarden/policy-evaluator/issues/56\"\u003eThis GitHub issue\u003c/a\u003e\nkeeps track of the Rego built-ins we have still to implement. Feel free to\ncomment over there to prioritize our work.\u003c/p\u003e\n\u003ch2 id=\"one-language-two-frameworks\"\u003eOne Language, Two Frameworks\u003c/h2\u003e\n\u003cp\u003eOpen Policy Agent integrates with Kubernetes using the \u003ca href=\"https://github.com/open-policy-agent/kube-mgmt\"\u003ekube-mgmt\u003c/a\u003e\nsidecar.\nMore recently, a new Kubernetes integration gained popularity: \u003ca href=\"https://github.com/open-policy-agent/gatekeeper\"\u003eGatekeeper\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBoth OPA and Gatekeeper use Rego to write their policies. However,\nthe way input parameters and other important information are exposed to the policy\nand how the policy has to answer differs between the two.\u003c/p\u003e\n\u003cp\u003eThis leads to the unfortunate situation where a Kubernetes policy written for\nthe OPA runtime will not work as expected if enforced by Gatekeeper, and vice versa.\u003c/p\u003e\n\u003cp\u003eWe don\u0026rsquo;t like this fragmentation in the \u0026ldquo;Rego landscape\u0026rdquo;. To address this, we worked to ensure\nthat Kubewarden can execute both policies built for OPA and Gatekeeper\n\u003cstrong\u003ewithout any change needed on existing policies\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"authoring-a-rego-policy\"\u003eAuthoring a Rego Policy\u003c/h2\u003e\n\u003cp\u003eRego polices can be built into a single WebAssembly module by using the \u003ccode\u003eopa build\u003c/code\u003e\ncommand. No change is required to already existing Rego policies.\u003c/p\u003e\n\u003cp\u003eWe want these WebAssembly modules to be loaded by Kubewarden transparently,\nso the end-users of your policy will not have to deal with the subtle differences\nbetween a \u0026ldquo;Kubewarden native\u0026rdquo; policy, an OPA policy or a Gatekeeper one.\nThe WebAssembly module must be enriched with some Kubewarden-specific metadata\nto achieve this portability.\u003c/p\u003e\n\u003cp\u003eAdding metadata to a WebAssembly module produced by \u003ccode\u003eopa build\u003c/code\u003e works in the\nsame way as modules produced by Rust and Go. This is done using the\n\u003ccode\u003ekwctl annotate\u003c/code\u003e command.\u003c/p\u003e\n\u003cp\u003eFinally, the annotated file can be pushed to an OCI registry with the usual\n\u003ccode\u003ekwctl push\u003c/code\u003e command.\u003c/p\u003e\n\u003cp\u003ePolicy authors can also evaluate their policy locally, before pushing it, via\nthe \u003ccode\u003ekwctl run\u003c/code\u003e command.\u003c/p\u003e\n\u003cp\u003eIf you are already familiar with Kubewarden, you will notice the developer\nworkflow stays the same, regardless of the programming language used.\u003c/p\u003e\n\u003cp\u003eAll these steps are described in detail inside of our \u003ca href=\"https://docs.kubewarden.io/writing-policies/rego/01-intro.html\"\u003edocumentation\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"enforcing-a-rego-policy\"\u003eEnforcing a Rego Policy\u003c/h2\u003e\n\u003cp\u003eKubewarden policies can be enforced inside of a Kubernetes cluster by defining\na \u003ccode\u003eClusterAdmissionPolicy\u003c/code\u003e object; this is a Kubernetes Custom Resource\nprovided by the Kubewarden project.\u003c/p\u003e\n\u003cp\u003eOperators don\u0026rsquo;t have to bother whether the policy was built using one of Kubewarden\nSDKs, OPA or Gatekeeper. The way to express settings and to enforce the policy\nis always the same.\u003c/p\u003e\n\u003ch2 id=\"wrapping-up\"\u003eWrapping Up\u003c/h2\u003e\n\u003cp\u003eWe have seen what Rego is and how it relates to Open Policy Agent and\nGatekeeper. We have witnessed how combining WebAssembly with Kubewarden can smooth the\ndifferences between the two of them.\u003c/p\u003e\n\u003cp\u003eWe have also seen that the workflows of policy authors and operation teams\nare uniform, regardless of the language used to write the policy.\u003c/p\u003e\n\u003cp\u003eDeveloper freedom and operation simplicity are top values for the Kubewarden\nproject. Thanks to WebAssembly we can work towards making\nKubewarden a universal policy platform.\u003c/p\u003e\n\u003cp\u003eNow the only thing we can request is to try this out! Run your Rego\npolicies, whether Open Policy Agent or Gatekeeper targeted, and let us\nknow what you think!\u003c/p\u003e\n\u003cp\u003eAlso, remember to enjoy Rego and burritos!\u003c/p\u003e\n","date":1632182400,"description":"","dir":"blog/2021/09/","expirydate":-62135596800,"fuzzywordcount":1100,"keywords":null,"kind":"page","lang":"en","lastmod":1633614063,"objectID":"f25d04d64d86a1ffac89a5475714b94a","permalink":"/blog/2021/09/towards-a-universal-policy-platform/","postref":"f25d04d64d86a1ffac89a5475714b94a","publishdate":"2021-09-21T00:00:00Z","readingtime":5,"relpermalink":"/blog/2021/09/towards-a-universal-policy-platform/","section":"blog","summary":"Kubewarden is a policy framework for Kubernetes. It can be used to secure your clusters and to ensure they stay compliant with the rules your organization establishes over time.\nBy leveraging the power of WebAssembly, Kubewarden allows policy authors to write policies using traditional programming languages such as Rust, Go, AssemblyScript and Swift.\nKubewarden policies, once compiled into WebAssembly modules, are then distributed using regular OCI registries. This allows Operators to have a consistent way to securely distribute both container images and policies.","tags":null,"title":"Towards a universal policy platform","type":"blog","url":"/blog/2021/09/towards-a-universal-policy-platform/","weight":0,"wordcount":1026},{"authors":["Flavio Castelli"],"categories":null,"content":"\u003cp\u003eIs the title of this post a pun inspired by Christmas or by the Games of Thrones?\nI can\u0026rsquo;t decide\u0026hellip;\u003cbr\u003e\nAre my dad jokes as bad as my daughters claim? Probably\u0026hellip;\u003cbr\u003e\nIs WebAssembly spreading inside of the Cloud Native ecosystem? ð¯ I have no doubts\nabout that!\u003c/p\u003e\n\u003cp\u003eFirst of all, why am I so excited about seeing WebAssembly flourish inside\nof the Cloud Native ecosystem? Well, it\u0026rsquo;s no secret that I\u0026rsquo;m a huge fan of it.\nAfter all, WebAssembly is at the heart of Kubewarden.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWebAssembly is flexible\u003c/strong\u003e. It grants Kubewarden policy authors the freedom to\npick their favorite languages and tools to write policies.\nWebAssembly allows developers to tap into the huge ecosystem of\nprogramming languages such as Rust, Go and many others to produce portable\n\u0026ldquo;build once, run everywhere\u0026rdquo; units of code.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWebAssembly is interoperable\u003c/strong\u003e. This opens interesting scenarios to Kubewarden operators, too.\nDid you know that \u003ca href=\"https://www.openpolicyagent.org/docs/latest/policy-language/\"\u003eRego-based policies\u003c/a\u003e,\nsuch as Open Policy Agent and Gatekeeper, can be built as WebAssembly\nmodules? We are currently working on a way to run Rego-based policies on\ntop of Kubewarden. This will allow operators to have a single policy platform\nto operate. We will talk more about that in a future post \u0026ndash; stay tuned for\nupdates!\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWebAssembly is secure\u003c/strong\u003e. It has been designed with a strong focus on\nsecurity since the beginning. Each WebAssembly module runs inside a\ndedicated sandbox, with no access to other WebAssembly processes or\nthe host system.\nKubewarden is a project operating in the security space, making it even more\nimportant to ensure our policies cannot be turned into an attack vector.\u003c/p\u003e\n\u003cp\u003eThankfully, WebAssembly and its runtime already do the heavy lifting for us.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eSo, I kept talking about WebAssembly and how much I love it. I gave you\nsome reasons, but I didn\u0026rsquo;t dig into the details. Luckily,\n\u003ca href=\"https://thenewstack.io/\"\u003eThe New Stack\u003c/a\u003e has recently published not one, but\n\u003cstrong\u003etwo articles\u003c/strong\u003e featuring WebAssembly.\u003cbr\u003e\nThese articles do a great job at explaining\n\u003ca href=\"https://thenewstack.io/what-is-webassembly/\"\u003ewhy everybody keeps talking about WebAssembly\u003c/a\u003e\nand \u003ca href=\"https://thenewstack.io/webassembly-aims-to-eliminate-the-file-system/\"\u003ehow WebAssembly can even change some computing assumptions\u003c/a\u003e.\u003cbr\u003e\nTake some time and give them a read. I\u0026rsquo;m sure you will find them interesting.\nPlus, cherry on top, they both feature Kubewarden ð.\u003c/p\u003e\n\u003cp\u003eBut we\u0026rsquo;re not over yet; more exciting things happened this week. The\nfollowing projects started the process to get included in the \u003ca href=\"https://www.cncf.io/sandbox-projects/\"\u003eCNCF sandbox\u003c/a\u003e:\n\u003ca href=\"https://krustlet.dev/\"\u003eKrustlet\u003c/a\u003e (see \u003ca href=\"https://github.com/cncf/toc/issues/690\"\u003ehere\u003c/a\u003e),\n\u003ca href=\"https://wasmcloud.com/\"\u003ewasmCloud\u003c/a\u003e (see \u003ca href=\"https://github.com/cncf/toc/issues/693\"\u003ehere\u003c/a\u003e)\nand\n\u003ca href=\"https://oras.land/\"\u003eORAS\u003c/a\u003e (see \u003ca href=\"https://github.com/cncf/toc/issues/692\"\u003ehere\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s take a closer look at them!\u003c/p\u003e\n\u003chr\u003e\n\u003cfigure class=\"center\"\u003e\n    \u003cimg src=\"/images/krustlet-logo.svg\"\n         alt=\"Krustlet logo\" width=\"60%\"/\u003e \n\u003c/figure\u003e\n\n\u003cp\u003e\u003ca href=\"https://krustlet.dev/\"\u003eKrustlet\u003c/a\u003e registers itself against a Kubernetes cluster\nas a Kubelet instance. However, the Krustlet Kubelet does not run regular containers;\nit instead executes WebAssembly programs.\u003c/p\u003e\n\u003cp\u003eKrustlet leverages \u003ca href=\"https://opencontainers.org/\"\u003eOCI registries\u003c/a\u003e to distribute\nthe WebAssembly modules to execute. This is the same approach Kubewarden\nadopts to distribute its policies.\u003c/p\u003e\n\u003cp\u003eAs a matter of fact, the Krustlet and Kubewarden teams are collaborating on the\n\u003ca href=\"https://crates.io/crates/oci-distribution\"\u003eoci-distribution\u003c/a\u003e crate. This is the Rust\nlibrary that Krustlet and Kubewarden use to retrieve\nWasm modules from OCI registries.\u003c/p\u003e\n\u003chr\u003e\n\u003cfigure class=\"center\"\u003e\n    \u003cimg src=\"/images/wasmcloud-logo.png\"\n         alt=\"wasmCloud logo\" width=\"60%\"/\u003e \n\u003c/figure\u003e\n\n\u003cp\u003e\u003ca href=\"https://wasmcloud.com/\"\u003ewasmCloud\u003c/a\u003e is a project with a strong focus on the\ndeveloper experience. wasmCloud provides a way to write portable code, that can be\ndeployed everywhere: from the cloud to your edge devices. As the name of the\nproject suggests, wasmCloud leverages WebAssembly too.\u003c/p\u003e\n\u003cp\u003eOnce more, as Kubewarden developers we are connected to the wasmCloud community,\ntoo. Both Kubewarden and wasmCloud are contributors to the \u003ca href=\"https://wapc.io/\"\u003ewaPC\u003c/a\u003e\nproject. This is the glue that allows our WebAssembly guest code to interact\nwith the host.\u003c/p\u003e\n\u003chr\u003e\n\u003cfigure class=\"center\"\u003e\n    \u003cimg src=\"/images/oras-logo.png\"\n         alt=\"ORAS logo\" width=\"60%\"/\u003e \n\u003c/figure\u003e\n\n\u003cp\u003eLast, but not least, let\u0026rsquo;s talk about \u003ca href=\"https://oras.land/\"\u003eORAS\u003c/a\u003e. This project\nturns \u003ca href=\"https://opencontainers.org/\"\u003eOCI container registries\u003c/a\u003e into generic\nartifact stores.\u003c/p\u003e\n\u003cp\u003eOn the surface this project doesn\u0026rsquo;t seem to be related to WebAssembly. However,\nwithout ORAS, neither Krustlet nor Kubewarden could store WebAssembly modules\ninside of OCI Container registries.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eOn behalf of the Kubewarden developers, let me congratulate all the teams\nbehind these projects. Thanks for inspiring us and paving the way for\nWebAssembly inside of CNCF!\u003c/p\u003e\n\u003cp\u003eWho knows, hopefully, Kubewarden will join your ranks one day! ð¤\u003c/p\u003e\n","date":1626393600,"description":"","dir":"blog/2021/07/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1633614063,"objectID":"332078ffeb6e59490e139e20acc40643","permalink":"/blog/2021/07/webassembly-is-coming-to-cloud-native/","postref":"332078ffeb6e59490e139e20acc40643","publishdate":"2021-07-16T00:00:00Z","readingtime":4,"relpermalink":"/blog/2021/07/webassembly-is-coming-to-cloud-native/","section":"blog","summary":"Is the title of this post a pun inspired by Christmas or by the Games of Thrones? I can\u0026rsquo;t decide\u0026hellip;\nAre my dad jokes as bad as my daughters claim? Probably\u0026hellip;\nIs WebAssembly spreading inside of the Cloud Native ecosystem? ð¯ I have no doubts about that!\nFirst of all, why am I so excited about seeing WebAssembly flourish inside of the Cloud Native ecosystem? Well, it\u0026rsquo;s no secret that I\u0026rsquo;m a huge fan of it.","tags":null,"title":"WebAssembly is coming to Cloud Native","type":"blog","url":"/blog/2021/07/webassembly-is-coming-to-cloud-native/","weight":0,"wordcount":650},{"authors":["Flavio Castelli"],"categories":null,"content":"\u003cp\u003eIn case you missed, CNCF Ambassador \u003ca href=\"https://twitter.com/SaiyamPathak\"\u003eSaiyam Pathak\u003c/a\u003e\nrecently hosted a live streaming event on \u003ca href=\"https://www.youtube.com/saiyam911\"\u003ehis YouTube channel\u003c/a\u003e about Kubewarden.\nFlavio had the pleasure to join Saiyam and give an overview of the project.\u003c/p\u003e\n\u003cp\u003eWe spoke about Kubernetes Admission Controllers, why we started the Kubewarden\nproject and how it differentiates from other existing open source projects such\nas Open Policy Agent and Kyverno.\u003c/p\u003e\n\u003cp\u003eThe talk features also a brief overview of WebAssembly, what it is and what are\nthe benefits it provides to Kubewarden.\u003c/p\u003e\n\u003cp\u003eFinally, the streaming event ends with a live demo that shows Kubewarden in\naction.\u003c/p\u003e\n\u003cp\u003eDuring the demo we also showed some experimental code we have been working on.\u003c/p\u003e\n\u003cp\u003eThis code opens a really exciting opportunity: the ability\nto execute Rego based policies, like the ones of Open Policy Agent and Gatekeeper,\non top of Kubewarden.\u003c/p\u003e\n\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n  \u003ciframe src=\"https://www.youtube.com/embed/b14YkyrLFcs\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" allowfullscreen title=\"Let\u0026#39;s Learn Kubewarden\"\u003e\u003c/iframe\u003e\n\u003c/div\u003e\n\n","date":1626134400,"description":"","dir":"blog/2021/07/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":1633614063,"objectID":"15ab88364b9c943dfbdce8d6ea03b745","permalink":"/blog/2021/07/learn-kubewarden-streaming-event/","postref":"15ab88364b9c943dfbdce8d6ea03b745","publishdate":"2021-07-13T00:00:00Z","readingtime":1,"relpermalink":"/blog/2021/07/learn-kubewarden-streaming-event/","section":"blog","summary":"In case you missed, CNCF Ambassador Saiyam Pathak recently hosted a live streaming event on his YouTube channel about Kubewarden. Flavio had the pleasure to join Saiyam and give an overview of the project.\nWe spoke about Kubernetes Admission Controllers, why we started the Kubewarden project and how it differentiates from other existing open source projects such as Open Policy Agent and Kyverno.\nThe talk features also a brief overview of WebAssembly, what it is and what are the benefits it provides to Kubewarden.","tags":null,"title":"Let's learn Kubewarden - Streaming Event","type":"blog","url":"/blog/2021/07/learn-kubewarden-streaming-event/","weight":0,"wordcount":139},{"authors":["Rafael FernÃ¡ndez LÃ³pez"],"categories":null,"content":"\u003cp\u003eAs you probably know, Kubernetes Pod Security Policies (PSPs) \u003ca href=\"https://github.com/kubernetes/kubernetes/blob/a3abd06ad53b2f02dcb6e060c7606ceda41f44af/CHANGELOG/CHANGELOG-1.21.md#deprecation-of-podsecuritypolicy\"\u003eare being\ndeprecated in Kubernetes\n1.21\u003c/a\u003e\n\u0026ndash; although these APIs will be served until Kubernetes 1.25 it\u0026rsquo;s a\ngood time to start thinking about what you will use to replace them.\u003c/p\u003e\n\u003cp\u003eAt Kubewarden we have an ongoing effort to replace the Pod Security\nPolicies with small, targeted Kubewarden policies.\u003c/p\u003e\n\u003cp\u003eUp until now, we have implemented some policies that replace some Pod\nSecurity Policies:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kubewarden/psp-capabilities\"\u003e\u003ccode\u003epsp-capabilities\u003c/code\u003e\u003c/a\u003e:\nvalidating and mutating policy that allows you to control the usage\nof container capabilities, for example allowing you to ensure that a\ncontainer has the required capabilities it needs to work correctly,\nor that it drops capabilities it doesn\u0026rsquo;t need, reducing the attack\nsurface of your containers.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kubewarden/psp-allow-privilege-escalation\"\u003e\u003ccode\u003epsp-allow-privilege-escalation\u003c/code\u003e\u003c/a\u003e:\nvalidating policy that allows you to ensure that no containers in a\ngiven pod can set \u003ccode\u003e.securityContext.allowPrivilegeEscalation: true\u003c/code\u003e\nin the security context of the container.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kubewarden/psp-apparmor\"\u003e\u003ccode\u003epsp-apparmor\u003c/code\u003e\u003c/a\u003e:\nvalidating policy that allows you to specify a list of allowed\nAppArmor profiles that a \u003ccode\u003ePod\u003c/code\u003e can use.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAnd now, the\n\u003ca href=\"https://github.com/kubewarden/psp-host-namespaces\"\u003e\u003ccode\u003epsp-host-namespaces\u003c/code\u003e\u003c/a\u003e\npolicy joins this list. Let\u0026rsquo;s inspect it a bit further.\u003c/p\u003e\n\u003ch2 id=\"the-policy\"\u003eThe policy\u003c/h2\u003e\n\u003cp\u003eThis policy is able to control whether a \u003ccode\u003ePod\u003c/code\u003e can request certain\nhost namespaces, instead of using a dedicated namespace for that pod\n\u0026ndash; as is the regular case.\u003c/p\u003e\n\u003cp\u003eWhile using the host namespaces is something to be avoided, there are\nsituations in which a workload needs to access them. For example, a\nworkload that inspects the processes running on the host.\u003c/p\u003e\n\u003ch3 id=\"policy-settings\"\u003ePolicy settings\u003c/h3\u003e\n\u003cp\u003eThe policy allows the following settings:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eallow_host_ipc\u003c/code\u003e: allows the pod to set \u003ccode\u003e.spec.HostIPC\u003c/code\u003e to true.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eallow_host_network\u003c/code\u003e: allows the pod to set \u003ccode\u003e.spec.HostNetwork\u003c/code\u003e to true.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eallow_host_pid\u003c/code\u003e: allows the pod to set \u003ccode\u003e.spec.HostPID\u003c/code\u003e to true.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eallow_host_ports\u003c/code\u003e: is a list of port ranges of the form:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eallow_host_ports\u003c/span\u003e:\n  - \u003cspan style=\"color:#f92672\"\u003emin\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003emax\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n  - \u003cspan style=\"color:#f92672\"\u003emin\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e443\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003emax\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e443\u003c/span\u003e\n  - \u003cspan style=\"color:#f92672\"\u003emin\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e8000\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003emax\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e9000\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis example would allow host ports \u003ccode\u003e80\u003c/code\u003e, \u003ccode\u003e443\u003c/code\u003e and the range\n\u003ccode\u003e8000-9000\u003c/code\u003e in the Pod \u003ccode\u003e.spec.containers[].ports[].hostPort\u003c/code\u003e attributes.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBy default all settings are disallowed, so if you want to allow the\nusage of, say, the host network and the host PID namespace usage, the\npolicy would need to have the following settings:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eallow_host_network\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003eallow_host_pid\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"running-the-policy\"\u003eRunning the policy\u003c/h3\u003e\n\u003cp\u003eThe policy validates Pods at creation time.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s run a couple of tests with \u003ca href=\"https://github.com/kubewarden/kwctl/\"\u003eour CLI tool,\n\u003ccode\u003ekwctl\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eYou will need at least \u003ccode\u003ekwctl\u003c/code\u003e version 0.1.7 to execute this examples.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s start by evaluating a Pod creation request which has host PID\nenabled:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ curl https://raw.githubusercontent.com/kubewarden/psp-host-namespaces/v0.0.7/test_data/pod_host_pid_enabled.json 2\u0026gt; /dev/null | \\\n    kwctl run -r - registry://ghcr.io/kubewarden/policies/psp-host-namespaces:v0.0.7 | jq\n{\n  \u0026#34;uid\u0026#34;: \u0026#34;1299d386-525b-4032-98ae-1949f69f9cfc\u0026#34;,\n  \u0026#34;allowed\u0026#34;: false,\n  \u0026#34;status\u0026#34;: {\n    \u0026#34;message\u0026#34;: \u0026#34;Pod has host PID enabled, but this is not allowed\u0026#34;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAs you can see, the request is rejected and a proper explanation is\nreturned to the user.\u003c/p\u003e\n\u003cp\u003eIn the previous run no settings were provided to the policy, so the\ndefault settings defined by the policy were used. Settings can also be\nprovided as an empty string or an empty object. It\u0026rsquo;s always up to the\npolicy to do settings defaulting, if any.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ curl https://raw.githubusercontent.com/kubewarden/psp-host-namespaces/v0.0.7/test_data/pod_host_pid_enabled.json 2\u0026gt; /dev/null | \\\n    kwctl run --settings-json \u0026#39;{}\u0026#39; -r - registry://ghcr.io/kubewarden/policies/psp-host-namespaces:v0.0.7 | jq\n{\n  \u0026#34;uid\u0026#34;: \u0026#34;1299d386-525b-4032-98ae-1949f69f9cfc\u0026#34;,\n  \u0026#34;allowed\u0026#34;: false,\n  \u0026#34;status\u0026#34;: {\n    \u0026#34;message\u0026#34;: \u0026#34;Pod has host PID enabled, but this is not allowed\u0026#34;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe pod was rejected again, as this execution is equivalent to the\nprevious one, as their settings are defaulted by the policy to the\nsame ones.\u003c/p\u003e\n\u003cp\u003eNow, let\u0026rsquo;s enable the PID namespace host in the policy settings:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ curl https://raw.githubusercontent.com/kubewarden/psp-host-namespaces/v0.0.7/test_data/pod_host_pid_enabled.json 2\u0026gt; /dev/null | \\\n    kwctl run --settings-json \u0026#39;{ \u0026#34;allow_host_pid\u0026#34;: true }\u0026#39; -r - registry://ghcr.io/kubewarden/policies/psp-host-namespaces:v0.0.7 | jq\n{\n  \u0026#34;uid\u0026#34;: \u0026#34;1299d386-525b-4032-98ae-1949f69f9cfc\u0026#34;,\n  \u0026#34;allowed\u0026#34;: true\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd that works as expected!\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eStay tuned, because during the following weeks we will implement the\n\u003ca href=\"https://github.com/kubewarden/policy-hub/issues/32\"\u003erest of the Pod Security Policies in separate, small Kubewarden\npolicies\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eYou can use \u003ca href=\"https://github.com/kubewarden/?q=psp\u0026amp;type=\u0026amp;language=\u0026amp;sort=\"\u003ethis GitHub\nsearch\u003c/a\u003e to\nfind out what Kubewarden policies are implementing Pod Security\nPolicies.\u003c/p\u003e\n\u003cp\u003eYou can also discover more policies in the \u003ca href=\"https://hub.kubewarden.io/\"\u003ePolicy\nHub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eYou can read more about \u003ca href=\"https://docs.kubewarden.io/\"\u003ehow to run this policies in a Kubernetes\ncluster by reading our documentation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAs always, thank you for reading!\u003c/p\u003e\n","date":1623369600,"description":"","dir":"blog/2021/06/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1633614063,"objectID":"6826de6b0b584da07dec1ddb8419d6c1","permalink":"/blog/2021/06/introducing-the-psp-host-namespaces-policy/","postref":"6826de6b0b584da07dec1ddb8419d6c1","publishdate":"2021-06-11T00:00:00Z","readingtime":4,"relpermalink":"/blog/2021/06/introducing-the-psp-host-namespaces-policy/","section":"blog","summary":"As you probably know, Kubernetes Pod Security Policies (PSPs) are being deprecated in Kubernetes 1.21 \u0026ndash; although these APIs will be served until Kubernetes 1.25 it\u0026rsquo;s a good time to start thinking about what you will use to replace them.\nAt Kubewarden we have an ongoing effort to replace the Pod Security Policies with small, targeted Kubewarden policies.\nUp until now, we have implemented some policies that replace some Pod Security Policies:","tags":null,"title":"Introducing the PSP host namespaces policy","type":"blog","url":"/blog/2021/06/introducing-the-psp-host-namespaces-policy/","weight":0,"wordcount":679},{"authors":["Flavio Castelli"],"categories":null,"content":"\u003cp\u003eWe are pleased to announce the availability of a new tool within the Kubewarden\nproject: \u003ca href=\"https://github.com/kubewarden/kwctl\"\u003ekwctl\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003ekwctl is a command line utility designed to help both policy authors\nand Kubernetes administrators.\u003c/p\u003e\n\u003cp\u003eThis blog post focuses on the user experience of Kubernetes administrators.\nFuture ones will cover the policy developer side of the story.\u003c/p\u003e\n\u003ch2 id=\"a-real-world-example-controlling-container-capabilities\"\u003eA Real-World Example: Controlling Container Capabilities\u003c/h2\u003e\n\u003cp\u003eThe main character of today\u0026rsquo;s story is Alice. Alice is a Kubernetes\nadministrator who wants to keep her Kubernetes cluster secure.\u003c/p\u003e\n\u003cp\u003eAlice uses many solutions to accomplish that, including\n\u003ca href=\"https://kubernetes.io/docs/concepts/policy/pod-security-policy/\"\u003eKubernetes PSP\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003ePod Security Policies are currently deprecated and are going to be removed from Kubernetes 1.25.\nDue to that, Alice wants to find an alternative to Kubernetes PSPs.\u003c/p\u003e\n\u003cp\u003eToday Alice will work to replace the \u003ca href=\"https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container\"\u003econtainer capabilities PSP\u003c/a\u003e\nwith a Kubewarden policy.\u003c/p\u003e\n\u003cp\u003eWe will tag along with Alice, watch all the steps she has to perform\nand learn how \u003ccode\u003ekwctl\u003c/code\u003e will help her.\u003c/p\u003e\n\u003ch2 id=\"finding-the-right-policy\"\u003eFinding the Right Policy\u003c/h2\u003e\n\u003cp\u003eAs a first step, Alice visits \u003ca href=\"https://hub.kubewarden.io\"\u003eKubewardenâs Policy Hub\u003c/a\u003e,\nthe place where Kubewarden policies can be made discoverable.\u003c/p\u003e\n\u003cp\u003eAlice enters the \u003cem\u003e\u0026ldquo;capabilities\u0026rdquo;\u003c/em\u003e query and finds a policy that seems to be\ndoing exactly what she\u0026rsquo;s looking for. The name of the policy is\n\u003cem\u003e\u0026ldquo;psp-capabilities\u0026rdquo;\u003c/em\u003e.\u003c/p\u003e\n\u003ch2 id=\"obtaining-the-policy\"\u003eObtaining the Policy\u003c/h2\u003e\n\u003cp\u003eNext Alice has to obtain the policy. This can be done with a\nsimple command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ kwctl pull registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis downloads the policy and stores it under Alice\u0026rsquo;s home directory.\u003c/p\u003e\n\u003ch2 id=\"understanding-how-the-policy-works\"\u003eUnderstanding How the Policy Works\u003c/h2\u003e\n\u003cp\u003eAlice now needs to understand how to use the policy. Each policy listed on\nKubewarden\u0026rsquo;s Policy Hub has links pointing to their documentation.\u003c/p\u003e\n\u003cp\u003eInstead of opening one of these links, Alice prefers to consult the\nmetadata provided by the policy:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ kwctl inspect registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis command produces the following output:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2021-june-kwctl-intro-admin-inspect-output.png\" alt=\"Output of kwctl inspect\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote well:\u003c/strong\u003e a Kubewarden policy is a regular \u0026ldquo;\u003ccode\u003e.wasm\u003c/code\u003e\u0026rdquo; file that, in addition\nto contain the policy\u0026rsquo;s bytecode, it also embeds additional metadata.\u003c/p\u003e\n\u003cp\u003eThis allows to have everything in a \u003cstrong\u003esingle place\u003c/strong\u003e, \u003cstrong\u003eversioned together\u003c/strong\u003e and\n\u003cstrong\u003eavailable off-line\u003c/strong\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"evaluating-the-policy\"\u003eEvaluating the Policy\u003c/h2\u003e\n\u003cp\u003eNow Alice wants to assess the reliability of the policy, plus find the right\nconfiguration values to satisfy her requirements.\u003c/p\u003e\n\u003cp\u003eThere are some good news for Alice: she doesn\u0026rsquo;t need to deploy the policy into\na Kubernetes cluster to perform this kind of rapid iterations. Once again, kwctl\ncan help her with the \u003ccode\u003erun\u003c/code\u003e subcommand.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ekwctl run\u003c/code\u003e command takes the following parameters:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r \u0026lt;request-path\u0026gt;\u003c/code\u003e\u003c/strong\u003e: path to a file containing the Kubernetes Admission Request\nto be evaluated\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--settings-json \u0026quot;\u0026lt;JSON document\u0026gt;\u0026quot;\u003c/code\u003e\u003c/strong\u003e: a string containing the JSON\nrepresentation of policy\u0026rsquo;s settings. It\u0026rsquo;s also possible to use the\n\u0026ldquo;\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;settings-path\u0026gt;\u003c/code\u003e\u003c/strong\u003e\u0026rdquo; flag to read the policy settings from a local file\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u0026lt;URI of the policy\u0026gt;\u003c/code\u003e\u003c/strong\u003e: the URI pointing to the policy to be used\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote well:\u003c/strong\u003e unfortunately, obtaining Kubernetes Admission Requests\nrequires some extra work. This is a \u0026ldquo;Kubernetes problem\u0026rdquo;, we plan to\naddress it in the near future.\u003c/p\u003e\n\u003cp\u003eIn the meantime, we will assume Alice has access to files like\n\u003ca href=\"https://github.com/kubewarden/psp-capabilities/tree/a786aba746e807aa3c6121438e8c05e724400861/test_data\"\u003ethese ones\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAlice will use \u003ca href=\"https://raw.githubusercontent.com/kubewarden/psp-capabilities/a786aba746e807aa3c6121438e8c05e724400861/test_data/req_pod_with_container_with_capabilities_added.json\"\u003ethis request\u003c/a\u003e;\nthat attempts to create a Pod with a container that has the\nfollowing \u003ccode\u003esecurityContext\u003c/code\u003e configuration:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAdd the \u003ccode\u003eNET_ADMIN\u003c/code\u003e and the \u003ccode\u003eSYS_TIME\u003c/code\u003e capabilities\u003c/li\u003e\n\u003cli\u003eDrop the \u003ccode\u003eSYS_PTRACE\u003c/code\u003e capability\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAs a first step, Alice defines a policy that allows containers to add only the \u003ccode\u003eSYS_TIME\u003c/code\u003e capability:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ kwctl run registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4 \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e            -r req_pod_with_container_with_capabilities_added.json \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e            --settings-json \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;allowed_capabilities\u0026#34;: [\u0026#34;SYS_TIME\u0026#34;]}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe output of the command, piped into \u003ca href=\"https://stedolan.github.io/jq/\"\u003e\u003ccode\u003ejq\u003c/code\u003e\u003c/a\u003e, is the following one:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e{ \n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;uid\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1299d386-525b-4032-98ae-1949f69f9cfc\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;allowed\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e,\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e: {\n    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;message\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;PSP capabilities policies doesn\u0026#39;t allow these capabilities to be added: {\\\u0026#34;NET_ADMIN\\\u0026#34;}\u0026#34;\u003c/span\u003e \n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is the behavior expected by Alice: the request is rejected because the\n\u003ccode\u003eNET_ADMIN\u003c/code\u003e capability is not part of the allow list.\u003c/p\u003e\n\u003cp\u003eThis policy is capable of mutating incoming requests, Alice wants to try it\nout using the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ kwctl run registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4 \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e        -r req_pod_with_container_with_capabilities_added.json \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e        --settings-json \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;default_add_capabilities\u0026#34;: [\u0026#34;AUDIT_READ\u0026#34;]}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe command will fail with the following output:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;valid\u0026#34;\u003c/span\u003e:false,\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;message\u0026#34;\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;These capabilities cannot be added by default because they are not allowed: {\\\u0026#34;AUDIT_READ\\\u0026#34;}\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\nError: Provided settings are not valid: Some\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;These capabilities cannot be added by default because they are not allowed: {\\\u0026#34;AUDIT_READ\\\u0026#34;}\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNice, the author of the policy implemented some validation of the settings\nprovided by the end users!\nThe error message points Alice in the right direction: the \u003ccode\u003eAUDIT_READ\u003c/code\u003e capability\ncannot be added to all the containers unless it\u0026rsquo;s also on the list of the\nallowed capabilities.\u003c/p\u003e\n\u003cp\u003eAlice runs the policy again, this time with a different configuration:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ kwctl run registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4 \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e      -r req_pod_with_container_with_capabilities_added.json \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e      --settings-json \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;default_add_capabilities\u0026#34;: [\u0026#34;AUDIT_READ\u0026#34;], \u0026#34;allowed_capabilities\u0026#34;: [\u0026#34;AUDIT_READ\u0026#34;]}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis time the configuration is correct, but the request is rejected with\nthe following explanation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e{\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;uid\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1299d386-525b-4032-98ae-1949f69f9cfc\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;allowed\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e,\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e: {\n    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;message\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;PSP capabilities policies doesn\u0026#39;t allow these capabilities to be added: {\\\u0026#34;NET_ADMIN\\\u0026#34;, \\\u0026#34;SYS_TIME\\\u0026#34;}\u0026#34;\u003c/span\u003e\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat\u0026rsquo;s actually a correct behavior, Alice forgot to allow the capabilities\nthe container is already adding to itself.\u003c/p\u003e\n\u003cp\u003eAlice now runs the kwctl command one last time:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ kwctl run registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4 \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e        -r req_pod_with_container_with_capabilities_added.json \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e        --settings-json \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;default_add_capabilities\u0026#34;: [\u0026#34;AUDIT_READ\u0026#34;], \u0026#34;allowed_capabilities\u0026#34;: [\u0026#34;AUDIT_READ\u0026#34;, \u0026#34;NET_ADMIN\u0026#34;, \u0026#34;SYS_TIME\u0026#34;]}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis time the policy accepts the incoming request, plus it mutates it.\nThis is the output returned:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e{\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;uid\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1299d386-525b-4032-98ae-1949f69f9cfc\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;allowed\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e,\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;patchType\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;JSONPatch\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;patch\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;W3sib3AiOiJhZGQiLCJwYXRoIjoiL3NwZWMvY29udGFpbmVycy8wL3NlY3VyaXR5Q29udGV4dC9jYXBhYmlsaXRpZXMvYWRkLzIiLCJ2YWx1ZSI6IkFVRElUX1JFQUQifV0=\u0026#34;\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAlice can see what the policy is going to change by looking at the contents of\nthe \u003ccode\u003epatch\u003c/code\u003e attribute.\nAs requested by Kubernetes, the patch operation is encoded using \u003ccode\u003ebase64\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ kwctl run registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4 \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e        -r req_pod_with_container_with_capabilities_added.json \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e        --settings-json \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;default_add_capabilities\u0026#34;: [\u0026#34;AUDIT_READ\u0026#34;], \u0026#34;allowed_capabilities\u0026#34;: [\u0026#34;AUDIT_READ\u0026#34;, \u0026#34;NET_ADMIN\u0026#34;, \u0026#34;SYS_TIME\u0026#34;]}\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  | jq -r .patch | base64 -d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis produces the following output:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e[{\u003cspan style=\"color:#f92672\"\u003e\u0026#34;op\u0026#34;\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;add\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026#34;path\u0026#34;\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/spec/containers/0/securityContext/capabilities/add/2\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AUDIT_READ\u0026#34;\u003c/span\u003e}]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis \u003ca href=\"https://en.wikipedia.org/wiki/JSON_Patch\"\u003eJSONPatch\u003c/a\u003e document is composed\nby the following parts:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eop\u003c/code\u003e\u003c/strong\u003e: this defines the operation to perform against the original request\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003evalue\u003c/code\u003e\u003c/strong\u003e: the string to be added to the original request\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003epath\u003c/code\u003e\u003c/strong\u003e: the JSON Pointer that defines which part of the original request\nis going to be changed\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHence, this JSONPatch adds \u0026ldquo;AUDIT_READ\u0026rdquo; to the original Pod object, at\n\u003ccode\u003e/spec/containers/0/securityContext/capabilities/add/2\u003c/code\u003e location.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s take a closer look at the JSON Pointer:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e/spec/containers\u003c/code\u003e\u003c/strong\u003e: this references the \u003ccode\u003econtainers\u003c/code\u003e section of the Pod \u003ccode\u003espec\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e/0\u003c/code\u003e\u003c/strong\u003e: since \u003ccode\u003espec.containers\u003c/code\u003e is an array, this fragment of\nthe path points to the first element of it. Note well, arrays elements\nare referenced using \u003ca href=\"https://en.wikipedia.org/wiki/Zero-based_numbering\"\u003ezero-based numbering\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e/securityContext/capabilities/add\u003c/code\u003e\u003c/strong\u003e: this navigates into the \u003ccode\u003esecurityContext\u003c/code\u003e\nof the container, then into the \u003ccode\u003ecapabilities\u003c/code\u003e object and finally into the\n\u003ccode\u003eadd\u003c/code\u003e section. This is the place where container capabilities to be added\nare specified\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e/2\u003c/code\u003e\u003c/strong\u003e: the original container has already two capabilities to be added,\n\u003ccode\u003eNET_ADMIN\u003c/code\u003e and \u003ccode\u003eSYS_TIME\u003c/code\u003e. Using zero-based numbering, \u003ccode\u003e/2\u003c/code\u003e points to\nthe third entry of the array.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe policy is working as expected; it leads to the creation of a Pod with\na container that has the \u003ccode\u003eNET_ADMIN\u003c/code\u003e, \u003ccode\u003eSYS_TIME\u003c/code\u003e, \u003ccode\u003eAUDIT_READ\u003c/code\u003e capabilities\nadded.\u003c/p\u003e\n\u003ch2 id=\"deploying-the-policy\"\u003eDeploying the Policy\u003c/h2\u003e\n\u003cp\u003eAfter more experiments with \u003ccode\u003ekwctl run\u003c/code\u003e, Alice wants to deploy the policy\ninside of a Kubernetes cluster.\u003c/p\u003e\n\u003cp\u003eKubewarden policies are defined using the\n\u003ca href=\"https://github.com/kubewarden/kubewarden-controller/blob/a74144e2c2f69dd96a7317feb44719a03677a885/docs/crds/README.asciidoc\"\u003eClusterAdmissionPolicy\u003c/a\u003e,\na Custom Resource provided by Kubewarden.\u003c/p\u003e\n\u003cp\u003eAlice can quickly scaffold the YAML file defining this resource using kwctl:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ kwctl manifest -t ClusterAdmissionPolicy registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe command will produce the following output:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#f92672\"\u003eapiVersion\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003epolicies.kubewarden.io/v1alpha2\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003ekind\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eClusterAdmissionPolicy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003egenerated-policy\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003emodule\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003esettings\u003c/span\u003e: {}\n  \u003cspan style=\"color:#f92672\"\u003erules\u003c/span\u003e:\n    - \u003cspan style=\"color:#f92672\"\u003eapiGroups\u003c/span\u003e:\n        - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eapiVersions\u003c/span\u003e:\n        - \u003cspan style=\"color:#ae81ff\"\u003ev1\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eresources\u003c/span\u003e:\n        - \u003cspan style=\"color:#ae81ff\"\u003epods\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003eoperations\u003c/span\u003e:\n        - \u003cspan style=\"color:#ae81ff\"\u003eCREATE\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003emutating\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ekwctl just saved quite some time for Alice ð\u003c/p\u003e\n\u003ch2 id=\"mirroring-policies\"\u003eMirroring Policies\u003c/h2\u003e\n\u003cp\u003eKubewarden policies are distributed via OCI container registries, the very\nsame pieces of infrastructure already used to distribute container images.\u003c/p\u003e\n\u003cp\u003eAlice doesn\u0026rsquo;t want her cluster to pull the Kubewarden policy straight from\n\u003ccode\u003eghcr.io/kubewarden/policies/psp-capabilities:v0.1.4\u003c/code\u003e, she rather prefers to\nfetch it from a local registry she controls.\u003c/p\u003e\n\u003cp\u003eThis can be done using the following commands:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ kwctl push -p registry://ghcr.io/kubewarden/policies/psp-capabilities:v0.1.4\n                registry.alice.corp.lan/policies/psp-capabilities:v0.1.4\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAlice can now use the \u003ccode\u003eregistry.alice.corp.lan/policies/psp-capabilities:v0.1.4\u003c/code\u003e\nurl inside of the \u003ccode\u003eClusterAdmissionPolicy\u003c/code\u003e definition.\u003c/p\u003e\n\u003cp\u003eThe policy can now be enforced inside of the local Kubernetes cluster with\na \u003ccode\u003ekubectl apply\u003c/code\u003e command ð\u003c/p\u003e\n\u003ch2 id=\"recap\"\u003eRecap\u003c/h2\u003e\n\u003cp\u003ekwctl allows us to download, test and deploy Kubewarden policies. The UX of kwctl\nmimics the one of docker, hence cloud native users should quickly feel at home\nwith it.\u003c/p\u003e\n\u003cp\u003eWe hope kwctl will be able to simplify the process of interacting with\nKubewarden policies.\nWe have many ideas about how to further expand its capabilities, but we would\nlove to hear what you would like to see addressed or changed.\u003c/p\u003e\n\u003cp\u003eWhat are you waiting for? Do like Alice and \u003ca href=\"https://github.com/kubewarden/kwctl/releases\"\u003egive kwctl a spin\u003c/a\u003e!\u003c/p\u003e\n","date":1623196800,"description":"","dir":"blog/2021/06/","expirydate":-62135596800,"fuzzywordcount":1400,"keywords":null,"kind":"page","lang":"en","lastmod":1633614063,"objectID":"5d38e02450bb6df72f859c1d9e86b929","permalink":"/blog/2021/06/kwctl-intro-for-kubernetes-administrators/","postref":"5d38e02450bb6df72f859c1d9e86b929","publishdate":"2021-06-09T00:00:00Z","readingtime":7,"relpermalink":"/blog/2021/06/kwctl-intro-for-kubernetes-administrators/","section":"blog","summary":"We are pleased to announce the availability of a new tool within the Kubewarden project: kwctl.\nkwctl is a command line utility designed to help both policy authors and Kubernetes administrators.\nThis blog post focuses on the user experience of Kubernetes administrators. Future ones will cover the policy developer side of the story.\nA Real-World Example: Controlling Container Capabilities The main character of today\u0026rsquo;s story is Alice. Alice is a Kubernetes administrator who wants to keep her Kubernetes cluster secure.","tags":null,"title":"Introducing kwctl to Kubernetes Administrators","type":"blog","url":"/blog/2021/06/kwctl-intro-for-kubernetes-administrators/","weight":0,"wordcount":1365},{"authors":["Rafael FernÃ¡ndez LÃ³pez"],"categories":null,"content":"\u003cp\u003eKubewarden is a project focused on security and compliance. Its main\ngoal is to allow you to write, test, distribute and run policies using\nthe tooling that you already know and master, with a focus on\ncontrolling Kubernetes inner behaviors.\u003c/p\u003e\n\u003cp\u003ePolicies are written in one of the supported languages, and the target\nobject is a WebAssembly binary artifact. This is how Kubewarden can\nensure that no matter where you built the policy, it can run on all\nplatforms without any kind of adaptation.\u003c/p\u003e\n\u003cp\u003eKubewarden supports both validating and mutating Kubernetes\nwebhooks. We have published Kubewarden SDKs for different\nlanguages. These allow you to implement your policies and reuse some\ncommon bits and pieces in an idiomatic way.\u003c/p\u003e\n\u003cp\u003eA policy can be deployed multiple times in the same cluster. This is\nso because policies are regular programs, and an important optional\nbit of the input we provide the policy is the configuration of the\npolicy itself. This is how you can have a generic policy that depends\non some configuration provided to it, and thus, behaves in a different\nway depending on the instance.\u003c/p\u003e\n\u003cp\u003eWhether you are developing your own internal policy, for the\ncommunity, or are looking to try some policies you found in the wild\nin our \u003ca href=\"https://hub.kubewarden.io\"\u003ePolicy Hub\u003c/a\u003e, chances are that you\nwant to check if the policy behaves as you expect \u0026ndash; leaving aside the\nfact that you might want to audit it; we will cover it in a future\nblog post. \u0026ndash;\u003c/p\u003e\n\u003cp\u003eEnough of an introduction. Let\u0026rsquo;s get our feet wet!\u003c/p\u003e\n\u003ch2 id=\"the-policy-idea\"\u003eThe policy idea\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s write a simple policy that has to do with internal company\ncompliance. Let\u0026rsquo;s say that in your organization, all teams have an\nidentifier, and that all the namespaces in your cluster must meet the\nfollowing requirements:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eName is prefixed with the team identifier owning the namespace\n\u003cul\u003e\n\u003cli\u003eDue to internal company compliance, all team identifiers follow\nthe pattern \u003ccode\u003et-\\w+-\\w+\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe following annotation keys are required. The annotation names are\nalso part of the compliance rules and agreed upon within the\ncompany:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecompliance.my-company.com/team-contact-email\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003eMust be a syntactically valid email ending with our company\ndomain.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecompliance.my-company.com/team-region\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003eAllowed values: \u003ccode\u003eAMER\u003c/code\u003e (North, Central and South America),\n\u003ccode\u003eAPAC\u003c/code\u003e (Asia-Pacific), \u003ccode\u003eEMEA\u003c/code\u003e (Europe, Middle-East and\nAfrica).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe policy won\u0026rsquo;t allow the creation of new namespaces that don\u0026rsquo;t\nfollow any of this rules.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s it for now. I am sure you already have in mind several ways to\nenrichen, improve and secure this simple policy.\u003c/p\u003e\n\u003ch2 id=\"the-language\"\u003eThe language\u003c/h2\u003e\n\u003cp\u003eAt the time of writing we have SDKs for the following languages:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kubewarden/policy-sdk-rust\"\u003eRust\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kubewarden/policy-sdk-swift\"\u003eSwift\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kubewarden/policy-sdk-go\"\u003eTinyGo\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis list is not static and more will be implemented over time. If you\nwant to know more about the SDKs and the languages we support and why,\nyou can \u003ca href=\"https://docs.kubewarden.io/writing-policies/index.html#programming-language-requirements\"\u003eextend the read through the Kubewarden\nbook\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe are going to write our policy in Go, thus, we will use the TinyGo\ncompiler.\u003c/p\u003e\n\u003cp\u003eIn general, starting a new policy is a matter of using the policy\ntemplate we have on GitHub, except for Rust, that has a dedicated\ntool. You can find more information \u003ca href=\"https://docs.kubewarden.io/\"\u003ein the\nbook\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"the-policy\"\u003eThe policy\u003c/h2\u003e\n\u003cp\u003eWe head to the \u003ca href=\"https://github.com/kubewarden/go-policy-template\"\u003e\u003ccode\u003ego-policy-template\u003c/code\u003e\nrepo\u003c/a\u003e and use that\ntemplate, creating a repository in one of our GitHub organizations.\u003c/p\u003e\n\u003ch3 id=\"prerequisites\"\u003ePrerequisites\u003c/h3\u003e\n\u003cp\u003eWe clone the repository we just generated from the template\nlocally. Your organization and repository name depend on what you\nchose on the GitHub web interface when using the template:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ git clone git@github.com:your-organization/your-templated-policy.git\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: you will need \u003ccode\u003edocker\u003c/code\u003e or \u003ccode\u003epodman\u003c/code\u003e installed for this\nexercise. At the time of writing, the policy template\u0026rsquo;s \u003ccode\u003eMakefile\u003c/code\u003e\ncalls to the \u003ccode\u003edocker\u003c/code\u003e CLI, so if you use \u003ccode\u003epodman\u003c/code\u003e, make sure you\nalso have a \u003ccode\u003edocker\u003c/code\u003e wrapper or symlink in your \u003ccode\u003e$PATH\u003c/code\u003e. This is so\nyou don\u0026rsquo;t have to install TinyGo yourself.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eLet\u0026rsquo;s perform a sanity check by running \u003ccode\u003emake\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ rm -rf vendor\n$ make\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: we remove the \u003ccode\u003evendor\u003c/code\u003e folder so dependencies will be\nfetched on every build. This is just for the sake of ease of build\nfor the blog post: you don\u0026rsquo;t need to do \u003ccode\u003ego mod tidy\u003c/code\u003e and \u003ccode\u003ego mod vendor\u003c/code\u003e afterwards when we add more dependencies, so you don\u0026rsquo;t need\nto have any kind of Go toolchain with the right versions on your\nmachine \u0026ndash; a simple \u003ccode\u003emake\u003c/code\u003e will build it, a little bit slower than\nvendored, but still. \u0026ndash;\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWe can see that as a result of the previous command, the sample policy\nthat the template contains has been built in a file called\n\u003ccode\u003epolicy.wasm\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ file policy.wasm\npolicy.wasm: WebAssembly (wasm) binary module version 0x1 (MVP)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLooks about right! Now, let\u0026rsquo;s go ahead and write our policy!\u003c/p\u003e\n\u003ch3 id=\"policy-first-go\"\u003ePolicy first go\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s start by editing the \u003ccode\u003emain.go\u003c/code\u003e file. For the sake blog post\nbrevity, I\u0026rsquo;ll keep the code on the \u003ccode\u003emain.go\u003c/code\u003e file, so it\u0026rsquo;s\nstraightforward to follow. Also, I\u0026rsquo;ll be skipping some other best\npractices, like TDD or even having unit tests, again for the sake of\nbrevity.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\t\u003cspan style=\"color:#a6e22e\"\u003ewapc\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/wapc/wapc-guest-tinygo\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/kubewarden/policy-sdk-go\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\t\u003cspan style=\"color:#a6e22e\"\u003ewapc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRegisterFunctions\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ewapc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFunctions\u003c/span\u003e{\n        \u003cspan style=\"color:#75715e\"\u003e// function that validates the k8s request\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;validate\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e) ([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAcceptRequest\u003c/span\u003e()\n\t\t},\n        \u003cspan style=\"color:#75715e\"\u003e// function that validates the policy settings\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;validate_settings\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e) ([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAcceptSettings\u003c/span\u003e()\n\t\t},\n\t})\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow we have a program, but we don\u0026rsquo;t have a way to know if it does what\nwe want. This instance is pretty trivial, right? It does nothing. It\njust accepts the request as if there was no policy at all. If policy\nghosting was a thing, this would be it.\u003c/p\u003e\n\u003cp\u003eOn the upside, though, we have a Wasm target object that we can run\neverywhere, provided we have the right Wasm engine tooling on the\nhost. How cool is that?\u003c/p\u003e\n\u003cp\u003eTake into account that despite the function is named\n\u003ccode\u003eAcceptRequest()\u003c/code\u003e, this doesn\u0026rsquo;t mean the request will be accepted, it\njust means that this policy will not reject it. Other active webhooks\nor policies could reject it though. Rejecting is final: if only one\nwebhook or policy rejects the request, it will be rejected.\u003c/p\u003e\n\u003ch2 id=\"dry-running\"\u003eDry running\u003c/h2\u003e\n\u003cp\u003eIn order to dry run our policy we will use the \u003ca href=\"https://github.com/kubewarden/kwctl\"\u003e\u003ccode\u003ekwctl\u003c/code\u003e command-line\ntool\u003c/a\u003e. You can go to the\n\u003ca href=\"https://github.com/kubewarden/kwctl/releases/\"\u003ereleases page\u003c/a\u003e, and\nfetch the latest one.\u003c/p\u003e\n\u003cp\u003eCheck that the tool is correctly installed:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kwctl --version\nkwctl 0.1.1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can inspect the \u003ccode\u003ekwctl\u003c/code\u003e commands by running \u003ccode\u003ekwctl --help\u003c/code\u003e. However, we will focus on the \u003ccode\u003erun\u003c/code\u003e command in this post.\u003c/p\u003e\n\u003cp\u003eIn order to run a policy, you need two mandatory things:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe policy to be executed (the \u003ccode\u003epolicy.wasm\u003c/code\u003e file we produced\nearlier as a first smoke test, and that we will really implement in\nthe next section of this post).\u003c/li\u003e\n\u003cli\u003eThe request to be evaluated\n\u003cul\u003e\n\u003cli\u003eThis is the \u003ca href=\"https://github.com/kubernetes/api/blob/v0.21.1/admission/v1beta1/types.go#L34-L42\"\u003eKubernetes \u003ccode\u003eAdmissionReview\u003c/code\u003e\nobject\u003c/a\u003e,\nor the \u003ca href=\"https://github.com/kubernetes/api/blob/v0.21.1/admission/v1beta1/types.go#L45-L118\"\u003e\u003ccode\u003eAdmissionRequest\u003c/code\u003e object it\ncontains\u003c/a\u003e. Any\nof those will work. It has to be provided in JSON format, that is\nhow the Kubernetes API server informs the webhook, and thus, the\npolicy.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNow we need a request to be evaluated. We can retrieve this request by\nauditing the API server, but I will hand you an example, given the\ngoal of this post is not to record or audit requests :)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e{\n\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AdmissionReview\u0026#34;\u003c/span\u003e,\n\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;apiVersion\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;admission.k8s.io/v1\u0026#34;\u003c/span\u003e,\n\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;request\u0026#34;\u003c/span\u003e: {\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;uid\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;150d1761-43fb-4f36-bb73-7a3888a0bca2\u0026#34;\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;group\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Namespace\u0026#34;\u003c/span\u003e\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;resource\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;group\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;resource\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;namespaces\u0026#34;\u003c/span\u003e\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;requestKind\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;group\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Namespace\u0026#34;\u003c/span\u003e\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;requestResource\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;group\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;resource\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;namespaces\u0026#34;\u003c/span\u003e\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;test-policy-ns\u0026#34;\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;namespace\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;test-policy-ns\u0026#34;\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;operation\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CREATE\u0026#34;\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;userInfo\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kubernetes-admin\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;groups\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;system:masters\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;system:authenticated\u0026#34;\u003c/span\u003e]\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;object\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Namespace\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;apiVersion\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;metadata\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;test-policy-ns\u0026#34;\u003c/span\u003e,\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;uid\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2cc6b1fc-7896-4091-b9c3-e034c89c0535\u0026#34;\u003c/span\u003e,\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;creationTimestamp\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2021-05-27T15:55:39Z\u0026#34;\u003c/span\u003e,\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;managedFields\u0026#34;\u003c/span\u003e: [{\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;manager\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kubectl\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;operation\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Update\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;apiVersion\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2021-05-27T15:55:39Z\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;fieldsType\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;FieldsV1\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;fieldsV1\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;f:status\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;f:phase\u0026#34;\u003c/span\u003e: {}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t},\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;spec\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;finalizers\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kubernetes\u0026#34;\u003c/span\u003e]\n\t\t\t},\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;phase\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Active\u0026#34;\u003c/span\u003e\n\t\t\t}\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;oldObject\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;dryRun\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;options\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CreateOptions\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;apiVersion\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;meta.k8s.io/v1\u0026#34;\u003c/span\u003e\n\t\t}\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI save this request as \u003ccode\u003erequest.json\u003c/code\u003e. Now, we have all the\ningredients to dry run the policy, so let\u0026rsquo;s do it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kwctl run policy.wasm --request-path request.json 2\u0026gt; /dev/null | jq\n{\n  \u0026#34;uid\u0026#34;: \u0026#34;150d1761-43fb-4f36-bb73-7a3888a0bca2\u0026#34;,\n  \u0026#34;allowed\u0026#34;: true\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAs expected, the response of the policy is that the request is\naccepted. This is a really good start! Now, let\u0026rsquo;s go and write the\nreal policy logic.\u003c/p\u003e\n\u003ch2 id=\"policy-implementation\"\u003ePolicy implementation\u003c/h2\u003e\n\u003cp\u003eWe have to implement three main checks based on the restrictions that\nhave been described by our compliance team:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe namespace name has to meet a specific prefix format\n(\u003ccode\u003et-\\w+-\\w+\u003c/code\u003e \u0026ndash; e.g. \u003ccode\u003et-ei-billing\u003c/code\u003e, \u003ccode\u003et-sre-security\u003c/code\u003e\u0026hellip;)\u003c/li\u003e\n\u003cli\u003eTwo annotations have to exist:\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003ecompliance.my-company.com/team-contact-email\u003c/code\u003e: has to be an\nemail address with the host part pointing to \u003ccode\u003e@my-company.com\u003c/code\u003e; we\nwon\u0026rsquo;t allow other domain names as contact email.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecompliance.my-company.com/team-region\u003c/code\u003e: has to be one (and\nonly one) of \u003ccode\u003eAMER\u003c/code\u003e, \u003ccode\u003eAPAC\u003c/code\u003e or \u003ccode\u003eEMEA\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLet\u0026rsquo;s implement the first check:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/kubewarden/gjson\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/kubewarden/policy-sdk-go\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;regexp\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003ewapc\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/wapc/wapc-guest-tinygo\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\t\u003cspan style=\"color:#a6e22e\"\u003ewapc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRegisterFunctions\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ewapc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFunctions\u003c/span\u003e{\n        \u003cspan style=\"color:#75715e\"\u003e// function that validates the k8s request\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;validate\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e) ([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n            \u003cspan style=\"color:#75715e\"\u003e// extract the name of the namespace by looking into the resource metadata attribute\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egjson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGetBytes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;request.object.metadata.name\u0026#34;\u003c/span\u003e)\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003enamespaceNameMatches\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eregexp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMatchString\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e`^t-\\w+-\\w+`\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e())\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRejectRequest\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;internal error while processing namespace \u0026#39;%s\u0026#39;: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNoCode\u003c/span\u003e)\n\t\t\t}\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e !\u003cspan style=\"color:#a6e22e\"\u003enamespaceNameMatches\u003c/span\u003e {\n\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRejectRequest\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;namespace \u0026#39;%s\u0026#39; does not comply with the company namespace naming convention: check https://internal.my-company.com/k8s/naming-conventions.md for more information\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNoCode\u003c/span\u003e)\n\t\t\t}\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAcceptRequest\u003c/span\u003e()\n\t\t},\n        \u003cspan style=\"color:#75715e\"\u003e// function that validates the policy settings\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;validate_settings\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e) ([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAcceptSettings\u003c/span\u003e()\n\t\t},\n\t})\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow the policy will check that the namespace name is compliant with\nthe naming rule.\u003c/p\u003e\n\u003cp\u003eIf we try to create a namespace that does not follow this pattern,\nlike the previous \u003ccode\u003erequest.json\u003c/code\u003e file, we will receive the following\nerror:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kwctl run policy.wasm --request-path request.json 2\u0026gt; /dev/null | jq\n{\n  \u0026#34;uid\u0026#34;: \u0026#34;150d1761-43fb-4f36-bb73-7a3888a0bca2\u0026#34;,\n  \u0026#34;allowed\u0026#34;: false,\n  \u0026#34;status\u0026#34;: {\n    \u0026#34;message\u0026#34;: \u0026#34;namespace \u0026#39;test-policy-ns\u0026#39; does not comply with the company namespace naming convention: check https://internal.my-company.com/k8s/naming-conventions.md for more information\u0026#34;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow let\u0026rsquo;s implement the rest of the checks:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/kubewarden/gjson\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/kubewarden/policy-sdk-go\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;regexp\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003ewapc\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/wapc/wapc-guest-tinygo\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\t\u003cspan style=\"color:#a6e22e\"\u003ewapc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRegisterFunctions\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ewapc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFunctions\u003c/span\u003e{\n\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;validate\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e) ([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n            \u003cspan style=\"color:#75715e\"\u003e// extract the name of the namespace by looking into the resource metadata attribute\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egjson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGetBytes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;request.object.metadata.name\u0026#34;\u003c/span\u003e)\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003enamespaceNameMatches\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eregexp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMatchString\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e`^t-\\w+-\\w+`\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e())\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRejectRequest\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[compliance] internal error while processing namespace \u0026#39;%s\u0026#39;: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNoCode\u003c/span\u003e)\n\t\t\t}\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e !\u003cspan style=\"color:#a6e22e\"\u003enamespaceNameMatches\u003c/span\u003e {\n\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRejectRequest\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[compliance] namespace \u0026#39;%s\u0026#39; does not comply with the company namespace naming convention: check https://internal.my-company.com/k8s/naming-conventions.md for more information\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNoCode\u003c/span\u003e)\n\t\t\t}\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eteamContactEmail\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egjson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGetBytes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;request.object.metadata.annotations.compliance\\\\.my-company\\\\.com/team-contact-email\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e()\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eteamContactEmail\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e {\n\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRejectRequest\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[compliance] the namespace \u0026#39;%s\u0026#39; is missing a mandatory annotation compliance.my-company.com/team-contact-email\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNoCode\u003c/span\u003e)\n\t\t\t}\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eteamContactEmailValidDomain\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eregexp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMatchString\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e`@my-company\\.com$`\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eteamContactEmail\u003c/span\u003e)\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRejectRequest\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[compliance] internal error while processing namespace: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNoCode\u003c/span\u003e)\n\t\t\t}\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e !\u003cspan style=\"color:#a6e22e\"\u003eteamContactEmailValidDomain\u003c/span\u003e {\n\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRejectRequest\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[compliance] the namespace \u0026#39;%s\u0026#39; does not comply with the company namespace naming convention: the compliance.my-company.com/team-contact-email annotation must end with @my-company.com\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNoCode\u003c/span\u003e)\n\t\t\t}\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eteamRegion\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egjson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eGetBytes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;request.object.metadata.annotations.compliance\\\\.my-company\\\\.com/team-region\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e()\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eteamRegion\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AMER\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eteamRegion\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;APAC\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eteamRegion\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;EMEA\u0026#34;\u003c/span\u003e {\n\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRejectRequest\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[compliance] the namespace \u0026#39;%s\u0026#39; does not comply with the company namespace naming convention: the compliance.my-company.com/team-region annotation must be one of: AMER, APAC or EMEA; is: \u0026#39;%s\u0026#39;\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enamespaceName\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eteamRegion\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNoCode\u003c/span\u003e)\n\t\t\t}\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAcceptRequest\u003c/span\u003e()\n\t\t},\n\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;validate_settings\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epayload\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e) ([]\u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekubewarden\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAcceptSettings\u003c/span\u003e()\n\t\t},\n\t})\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDespite the checks can be improved further, we have an initial\nimplementation of the policy that checks for compliance of the\nnamespace for our organization.\u003c/p\u003e\n\u003cp\u003eHowever, as you can see, we have a number of hardcoded logic, messages\nand bits that could be parameters. This way, we can have a pattern\nthat can be reused with different parameters. Depending on the policy,\nyou might even have multiple instances of the policy with different\nsettings \u0026ndash; potentially targeting different resources or HTTP verbs,\nso they could perform potentially different checks.\u003c/p\u003e\n\u003cp\u003eNow, let\u0026rsquo;s close the circle, and test a valid request against our\nlatest policy. I will save this request as \u003ccode\u003evalid-request.json\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e{\n\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AdmissionReview\u0026#34;\u003c/span\u003e,\n\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;apiVersion\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;admission.k8s.io/v1\u0026#34;\u003c/span\u003e,\n\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;request\u0026#34;\u003c/span\u003e: {\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;uid\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;150d1761-43fb-4f36-bb73-7a3888a0bca2\u0026#34;\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;group\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Namespace\u0026#34;\u003c/span\u003e\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;resource\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;group\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;resource\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;namespaces\u0026#34;\u003c/span\u003e\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;requestKind\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;group\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Namespace\u0026#34;\u003c/span\u003e\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;requestResource\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;group\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;resource\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;namespaces\u0026#34;\u003c/span\u003e\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;t-ei-billing\u0026#34;\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;namespace\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;t-ei-billing\u0026#34;\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;operation\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CREATE\u0026#34;\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;userInfo\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kubernetes-admin\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;groups\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;system:masters\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;system:authenticated\u0026#34;\u003c/span\u003e]\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;object\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Namespace\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;apiVersion\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;metadata\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;t-ei-billing\u0026#34;\u003c/span\u003e,\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;uid\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2cc6b1fc-7896-4091-b9c3-e034c89c0535\u0026#34;\u003c/span\u003e,\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;creationTimestamp\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2021-05-27T15:55:39Z\u0026#34;\u003c/span\u003e,\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;annotations\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;compliance.my-company.com/team-contact-email\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ei-billing@my-company.com\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;compliance.my-company.com/team-region\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;EMEA\u0026#34;\u003c/span\u003e\n\t\t\t\t},\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;managedFields\u0026#34;\u003c/span\u003e: [{\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;manager\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kubectl\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;operation\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Update\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;apiVersion\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;v1\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2021-05-27T15:55:39Z\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;fieldsType\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;FieldsV1\u0026#34;\u003c/span\u003e,\n\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;fieldsV1\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;f:status\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;f:phase\u0026#34;\u003c/span\u003e: {}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t},\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;spec\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;finalizers\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kubernetes\u0026#34;\u003c/span\u003e]\n\t\t\t},\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;status\u0026#34;\u003c/span\u003e: {\n\t\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;phase\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Active\u0026#34;\u003c/span\u003e\n\t\t\t}\n\t\t},\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;oldObject\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;dryRun\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;options\u0026#34;\u003c/span\u003e: {\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;kind\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CreateOptions\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#f92672\"\u003e\u0026#34;apiVersion\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;meta.k8s.io/v1\u0026#34;\u003c/span\u003e\n\t\t}\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow, we can run this policy against the \u003ccode\u003evalid-request.json\u003c/code\u003e request:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ kwctl run policy.wasm --request-path valid-request.json 2\u0026gt; /dev/null | jq\n{\n  \u0026#34;uid\u0026#34;: \u0026#34;150d1761-43fb-4f36-bb73-7a3888a0bca2\u0026#34;,\n  \u0026#34;allowed\u0026#34;: true\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFeel free to play with the request. You can modify the annotations or\nnaming of the namespace, and check the error result you get back if\nthe request is not compliant.\u003c/p\u003e\n\u003cp\u003eAnd so, we can see that the policy behaves as we expect! We have seen\nsome aspects of Kubewarden and the policy cycle:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHow to write a policy from scratch\u003c/li\u003e\n\u003cli\u003eHow to test a policy with different requests\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHowever, for your policy to be active on a Kubernetes cluster there\nare some bits and pieces we are still missing. The main questions at\nthis point are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHow to safely make the policy easy to distribute\n\u003cul\u003e\n\u003cli\u003eKubewarden has focused on you reusing your existing knowledge\nand tools, so policies can either be distributed using an HTTPS\nserver, or preferrably, an OCI registry.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eHow to deploy the policy to a Kubernetes cluster\n\u003cul\u003e\n\u003cli\u003eWe have created the \u003ca href=\"https://github.com/kubewarden/kubewarden-controller\"\u003e\u003ccode\u003ekubewarden-controller\u003c/code\u003e\nproject\u003c/a\u003e\nthat makes it trivial to deploy policies inside your cluster,\nonce the previous point has been covered.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eHow can I connect the policy in Kubernetes? How can I establish what\ntype of requests will be evaluated by a policy?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are also some open questions, such as: what happens if a\nresource that was accepted with a previous revision of a policy now\nwould be rejected with the latest policy version? In a living and\nevolving environment that holds state this is a common\nsituation. Kubewarden has also plans to have you covered in this case.\u003c/p\u003e\n\u003cp\u003eWe will cover these topics in a much broader way in future blog\nposts.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eThank you for reading up to this point, we hope you enjoyed the post!\u003c/p\u003e\n\u003cp\u003eWe have seen how to build a policy from scratch, in this case using Go\n(and the TinyGo compiler). We have also seen that there are more SDKs\navailable to you such as the Rust and Swift ones.\u003c/p\u003e\n\u003cp\u003eWe have also covered how to test a policy once we have the WebAssembly\nbinary artifact, so we can run tests against the policy, ensuring that\nit behaves as we expect.\u003c/p\u003e\n\u003cp\u003eThere are some open questions regarding the policy distribution and\nrunning policies in a Kubernetes cluster that we opened in the last\nsection, and that we will cover in future blog posts.\u003c/p\u003e\n\u003cp\u003eStay tuned and thank you for reading!\u003c/p\u003e\n","date":1622592e3,"description":"","dir":"blog/2021/06/","expirydate":-62135596800,"fuzzywordcount":2500,"keywords":null,"kind":"page","lang":"en","lastmod":1633614063,"objectID":"633454c7df3186b68d9f4e34500fe56d","permalink":"/blog/2021/06/writing-your-first-policy-with-kubewarden/","postref":"633454c7df3186b68d9f4e34500fe56d","publishdate":"2021-06-02T00:00:00Z","readingtime":12,"relpermalink":"/blog/2021/06/writing-your-first-policy-with-kubewarden/","section":"blog","summary":"Kubewarden is a project focused on security and compliance. Its main goal is to allow you to write, test, distribute and run policies using the tooling that you already know and master, with a focus on controlling Kubernetes inner behaviors.\nPolicies are written in one of the supported languages, and the target object is a WebAssembly binary artifact. This is how Kubewarden can ensure that no matter where you built the policy, it can run on all platforms without any kind of adaptation.","tags":null,"title":"Writing your first policy with Kubewarden","type":"blog","url":"/blog/2021/06/writing-your-first-policy-with-kubewarden/","weight":0,"wordcount":2498},{"authors":null,"categories":null,"content":"\u003csection class=\"intro\"\u003e\n  \u003cdiv class=\"bg-primary\"\u003e\n    \u003cdiv class=\"wrap grid-one\"\u003e\n      \u003cdiv\u003e\n        \u003ch1 style=\"color: white;\"\u003eKubernetes Dynamic Admission at your fingertips\u003c/h1\u003e\n        \u003ch4 style=\"color: white;\"\u003eFlexible, secure and portable thanks to WebAssembly\u003c/h4\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\n  \u003cdiv class=\"folder\"\u003e\n    \u003ch4 style=\"color: white;\"\u003eGreat For\u003c/h4\u003e\n    \u003cdiv class=\"bg-light grid-dynamic text-center\"\u003e\n      \u003ch5\u003eFamiliar policy writing\u003c/h5\u003e\n      \u003ch5\u003eEasy policy distribution\u003c/h5\u003e\n      \u003ch5\u003eBuild and push once, run everywhere\u003c/h5\u003e\n      \u003ch5\u003eCommunity maintained policies\u003c/h5\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/section\u003e\n\n\u003csection class=\"wrap\"\u003e\n  \u003ch2\u003eWhat is Kubewarden?\u003c/h2\u003e\n  \u003cp class=\"text-center font-weight-light\"\u003eKubewarden is a policy engine for Kubernetes. Its mission is to\n  simplify the adoption of \u003cstrong\u003epolicy-as-code\u003c/strong\u003e.\n  \u003c/p\u003e\n\n  \u003cdiv class=grid-two\u003e\n    \u003cdiv\u003e\n      \u003ch4\u003eAs a Policy author\u003c/h4\u003e\n      \u003cp class=\"text-left font-weight-light\"\u003eKubewarden doesn't force you to learn a new Domain Specific Language\n      or a query language.\u003c/p\u003e\n      \u003cp class=\"text-left font-weight-light\"\u003eWrite policies in your favorite programming language. Reuse your skills and feel instantly productive.\n      \u003c/p\u003e\n    \u003c/div\u003e\n    \u003cdiv\u003e\n      \u003ch4\u003eAs a Kubernetes Operator\u003c/h4\u003e\n      \u003cp class=\"text-left font-weight-light\"\u003eKubewarden policies can be distributed using container registries. Keep using your existing infrastructure and processes.\u003c/p\u003e\n\n      \u003cp class=\"text-left font-weight-light\"\u003eIt's easy to experiment with policies and to integrate them into CI/CD pipelines.\u003c/p\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/section\u003e\n\u003chr /\u003e\n\n\u003csection class=\"wrap\"\u003e\n  \u003ch2\u003eWhy Use Kubewarden\u003c/h2\u003e\n  \u003cdiv class=\"grid-three\"\u003e\n    \u003cdiv\u003e\n      \u003ch5\u003eFreedom of choice\u003c/h5\u003e\n      \u003cp\u003eWrite policies using your favorite programming language, as long as it can be compiled into WebAssembly.\u003c/p\u003e\n    \u003c/div\u003e\n\n    \u003cdiv\u003e\n      \u003ch5\u003eFeel at home\u003c/h5\u003e\n      \u003cp\u003ePolicies are regular programs. Use the tools you love, reuse your skills, libraries and best practices.\u003c/p\u003e\n    \u003c/div\u003e\n\n    \u003cdiv\u003e\n      \u003ch5\u003ePortable\u003c/h5\u003e\n      \u003cp\u003ePolicies are portable. Once built, they can run everywhere, regardless of the architecture and Operating System.\u003c/p\u003e\n    \u003c/div\u003e\n\n  \u003c/div\u003e\n\u003c/section\u003e\n\u003chr /\u003e\n\n\u003csection class=\"wrap\"\u003e\n  \u003ch2\u003eHow it Works\u003c/h2\u003e\n  \u003cimg src=\"../images/how-it-works-kubewarden.svg\" alt=\"{{ .Site.Title }}\" style=\"padding: 3em; background: #eeeeee; border-radius: 25px;\"\u003e\n\n  \u003cp class=\"text-left font-weight-light\"\u003eKubewarden integrates with Kubernetes by providing a set of Custom Resources. These Custom\n  Resources simplify the process of enforcing policies on your cluster.\u003c/p\u003e\n  \u003cp class=\"text-left font-weight-light\"\u003ePolicies are implemented as WebAssembly modules and are distributed using regular\n  container registries. They are evaluated inside of a Kubewarden component called \u003cem\u003e\"Policy Server\".\u003c/em\u003e\u003c/p\u003e\n  \u003c/p\u003e\n  \u003cp class=\"text-left font-weight-light\"\u003eKubewarden Policy Server is a Kubernetes Admission Webhook. Each policy is exposed using a\n  dedicated endpoint. Policies are isolated from the host and from each other. Every single policy is confined inside of a dedicated secure sandbox.\n  \u003c/p\u003e\n\n\u003c/section\u003e\n\u003chr /\u003e\n\n\u003csection class=\"get-started\"\u003e\n  \u003cdiv class=\"white\"\u003e\n    \u003ch2 class=\"text-center\"\u003eGet Started\u003c/h2\u003e\n    \u003cpre\u003e\n\u003ccode\u003e\n$ helm repo add kubewarden https://charts.kubewarden.io\n$ kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.5.3/cert-manager.yaml\n$ helm install --create-namespace -n kubewarden kubewarden-crds kubewarden/kubewarden-crds\n$ helm install --wait -n kubewarden kubewarden-controller kubewarden/kubewarden-controller\n\n$ # ... and continue reading \u003ca href=\"https://docs.kubewarden.io/quick-start.html\" style=\"color: white;\"\u003ethe quick start\u003c/a\u003e documentation\n\u003c/code\u003e\n      \u003c/pre\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"bg-primary\"\u003e\n    \u003cdiv class=\"wrap\"\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/section\u003e\n","date":1618572526,"description":"","dir":"/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"home","lang":"en","lastmod":1633614063,"objectID":"3971dee9690c45ec29595f6ae97154f9","permalink":"/","postref":"3971dee9690c45ec29595f6ae97154f9","publishdate":"2021-04-16T13:28:46+02:00","readingtime":2,"relpermalink":"/","section":"","summary":"Kubernetes Dynamic Admission at your fingertips Flexible, secure and portable thanks to WebAssembly    Great For Familiar policy writing Easy policy distribution Build and push once, run everywhere Community maintained policies    What is Kubewarden? Kubewarden is a policy engine for Kubernetes. Its mission is to simplify the adoption of policy-as-code.  As a Policy author Kubewarden doesn't force you to learn a new Domain Specific Language or a query language.","tags":null,"title":"Kubewarden: Kubernetes Dynamic Admission at your fingertips","type":"page","url":"/","weight":0,"wordcount":298},{"authors":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"","permalink":"/categories/","postref":"","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/","section":"categories","summary":"","tags":null,"title":"Categories","type":"categories","url":"/categories/","weight":0,"wordcount":0},{"authors":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"","permalink":"/tags/","postref":"","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/","section":"tags","summary":"","tags":null,"title":"Tags","type":"tags","url":"/tags/","weight":0,"wordcount":0}]